name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_DIR: build
  TESTS_DIR: .github/tests

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      build_cache_key: ${{ steps.cache_build.outputs.cache-key }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          version: '3.23'

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Configure CMake
        run: cmake -S . -B ${{ env.BUILD_DIR }}

      - name: Build targets
        run: |
          cd ${{ env.BUILD_DIR }}
          make -j$(nproc)
          cd ../

      - name: Cache build artifacts
        id: cache_build
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  unit-tests:
    name: Unit Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ needs.build.outputs.build_cache_key }}

      - name: Run unit tests
        run: |
          cd ${{ env.BUILD_DIR }}
          ctest --output-on-failure

  integration-tests:
    name: Integration Tests
    needs: [build, unit-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_num: [1, 2]

    steps:
      - uses: actions/checkout@v3

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ needs.build.outputs.build_cache_key }}

      - name: Run test case ${{ matrix.test_num }}
        run: |
          cd ${{ env.BUILD_DIR }}
          INPUT_FILE="../${{ env.TESTS_DIR }}/input/input_${{ matrix.test_num }}"
          EXPECTED_OUT="../${{ env.TESTS_DIR }}/output/output_${{ matrix.test_num }}"
          EXPECTED_ERR="../${{ env.TESTS_DIR }}/error/error_${{ matrix.test_num }}"

          if [ ! -f "$EXPECTED_OUT" ]; then
            echo "::error::Missing expected output $EXPECTED_OUT"
            exit 1
          fi
          if [ ! -f "$EXPECTED_ERR" ]; then
            echo "::error::Missing expected error $EXPECTED_ERR"
            exit 1
          fi

          if [ -f "$INPUT_FILE" ]; then
            ./run "$INPUT_FILE" > actual_out 2> actual_err
          else
            ./run > actual_out 2> actual_err
          fi

          echo "=== Checking stdout ==="
          diff -u --color "$EXPECTED_OUT" actual_out || exit 1
          
          echo "=== Checking stderr ==="
          diff -u --color "$EXPECTED_ERR" actual_err || exit 1
          
          echo "Test ${{ matrix.test_num }} PASSED"
