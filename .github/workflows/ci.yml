name: Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_DIR: build
  TESTS_DIR: .github/tests

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - uses: actions/checkout@v4
      - name: Build project
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }}
          cmake --build ${{ env.BUILD_DIR }} -- -j$(nproc)

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}
  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}

      - name: Run test
        run: |
          cd ${{ env.BUILD_DIR }}
          ctest --output-on-failure
  main-logic-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_num: [1, 2]

    steps:
      - uses: actions/checkout@v4

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}

      - name: Run test ${{ matrix.test_num }}
        run: |
          cd ${{ env.BUILD_DIR }}
          INPUT_FILE="${{ env.TESTS_DIR }}/input/input_${{ matrix.test_num }}"
          EXPECTED_OUT="${{ env.TESTS_DIR }}/output/output_${{ matrix.test_num }}"
          EXPECTED_ERR="${{ env.TESTS_DIR }}/error/error_${{ matrix.test_num }}"
          EXPECTED_EXIT=$(awk "NR==${{ matrix.test_num }}" "${{ env.TESTS_DIR }}/exit_codes.txt")

          # Проверка файлов
          [ -f "$INPUT_FILE" ] || { echo "::error::Missing input file"; exit 1; }
          [ -f "$EXPECTED_OUT" ] || { echo "::error::Missing output file"; exit 1; }
          [ -f "$EXPECTED_ERR" ] || { echo "::error::Missing error file"; exit 1; }
          
          # Запуск и проверка
          ./run "$INPUT_FILE" > actual_out 2> actual_err
          ACTUAL_EXIT=$?
          
          if [ $ACTUAL_EXIT -ne $EXPECTED_EXIT ]; then
            echo "::error::Exit code mismatch. Expected $EXPECTED_EXIT, got $ACTUAL_EXIT"
            exit 1
          fi
          
          diff -u "$EXPECTED_OUT" actual_out || { echo "::error::Stdout mismatch"; exit 1; }
          diff -u "$EXPECTED_ERR" actual_err || { echo "::error::Stderr mismatch"; exit 1; }

  cleanup:
    needs: [build, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: build-artifacts
      - name: Clean workspace
        run: rm -rf ${{ env.BUILD_DIR }}
